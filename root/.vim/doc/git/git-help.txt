vim:ft=help

*vim-git-help*
*git-help*
*git*

===============================================================================
*git添加ppa*
https://launchpad.net/~git-core/+archive/ubuntu/ppa
===============================================================================
Git 开发规范
https://github.com/universal-ctags/ctags/pull/3747
https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows

|git-flow|

See also:
$DOC2/cs/system/software_engineering/version-control-and-release-model
$DOC2/cs/system/software_engineering/tools-open-source/git-github

*conventional-commits*

代码提交版本的备注重要吗？ - 知乎 https://www.zhihu.com/question/659970119

https://cbea.ms/git-commit/

|semver|
www.conventionalcommits.org

*cog*
cli工具: https://github.com/cocogitto/cocogitto

bash补全(See: https://docs.cocogitto.io/)
>bash
    cog generate-completions bash > ~/.local/share/bash-completion/completions/cog
<

初始化配置文件
>bash
    cog init
<

之后可以在cog.toml中添加`tag_prefix = "v"`，用于识别语义化版本 https://semver.org/lang/zh-CN/


*git-cliff* 自动生成changelog

其它工具
https://commitlint.js.org/#/
===============================================================================
*git-log*

git 查看src/main.c 20-25行的修改历史
>
	git log -L 20,25:src/main.c
<
或者直接Visual mode下选中20-25行，然后`:GV`

*git-blame*
`:Git blame`也可以Visual mode选中执行。

*git历史分析工具*

https://github.com/src-d/hercules
https://github.com/erikbern/git-of-theseus
-------------------------------------------------------------------------------
Git 修改历史提交的文件                                 *git-modify-history-file*

如果你想修改历史提交中的某个文件，你可以使用以下步骤：

1. 使用 'git log' 查看提交历史，找到你想要修改的提交的哈希值。

2. 执行 'git rebase -i <commit_hash>^' 进入交互式 rebase 模式。
   ('commit_hash' 是你在第一步找到的哈希值。'^' 符号表示父提交)

3. 在你想要修改的提交前面，将 'pick' 改为 'edit'。

4. 保存并关闭编辑器，然后使用 'git checkout -- <filename>' 来恢复你想要修改
   的文件到这次提交的状态。

5. 对文件进行你需要的修改。

6. 提交这个修改，你可以使用 'git add <filename>' 添加修改，然后用
   'git commit --amend' 修改这个提交。

7. 运行 'git rebase --continue' 完成 rebase 操作。

*git将某一个commit拆分为2个*
>
  git rebase -i abc123^ # ^指abc123前一个commit
  git reset HEAD^       # 将该commit回退一个更改，但保留更改内容
  git add ...
  git commit ...
  git rebase --continue
<

https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History

*git从历史提交中永久删除文件*			git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch root/.vim/doc/tags-cn' --prune-empty --tag-name-filter cat -- --all

*git-filter-repo*

https://github.com/newren/git-filter-repo#how-do-i-install-it
>
  apt install git-filter-repo
<

删除历史中的所有.onnx文件，--invert-paths表示除了指定的文件外，保留所有其他文件
>
	git filter-repo --path-glob '*.onnx' --invert-paths
<
该操作可能导致remote消失，需要重新git remote add

https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository

-------------------------------------------------------------------------------
*git-fetch*

先git clone xxx --depth=10, 再git fetch --unshallow似乎比直接git clone xxx快。

git只fetch某个远程仓库的某一个分支 >
  git fetch origin feature
<

git远程仓库某个分支fetch到本地某个分支 >
  git fetch origin feature:feature
<

-------------------------------------------------------------------------------
*git-commit*

往前数x个提交   <commit>~x
没有往后数x个提交的写法，因为一个父提交可能有多个子提交，但一个子提交只有一个父提交。

git commit --amend                                      *git-commit-amend*

'git commit --amend' 是一个 Git 命令，用于修改最近一次提交。这个命令会将暂存区中
的文件添加到最近一次的提交中，并允许你修改提交信息。

如果你提交后忘记了包含一些修改的文件，你可以简单地将它们添加到暂存区，然后运行
'git commit --amend'。如果你的最新提交信息有误（例如拼写错误或描述不清），你可以
使用 'git commit --amend' 来更改它。

如果你不小心使用 'git commit --amend' 命令，并想撤销对最近一次提交的修改，你可以
使用 'git reset --hard ORIG_HEAD' 命令。这会撤销 'git commit --amend' 对最近一次
提交的所有修改，并将这些修改留在工作区。

amend同时修改日期 >
  git commit --amend --date=now
<
-------------------------------------------------------------------------------
                                                     *git-reflog*

git reflog用于查看所有历史git log，可以帮忙找回不慎丢失的commit。

git reflog 的清理（过期）基于两个主要的配置设置：

gc.reflogExpire：控制引用日志（reflog）条目的保留时间，默认为 90 天。此设置适用于除 HEAD 外的所有引用。

gc.reflogExpireUnreachable：控制不可达引用日志条目的保留时间，默认为 30 天
"不可达" 指的是那些从当前分支的最新提交无法达到的提交。
对于 HEAD 引用，这个设置通常更加严格，因为 HEAD 更有可能被频繁地改变。

-------------------------------------------------------------------------------
Git Reset ~
*git-reset*

|git合并commit|

git reset 用于回滚到历史commit。

--soft, --mixed（默认）, --hard, --keep ~

git reset --soft <commit>        *git-reset-soft*
git reset <commit> / git reset --mixed <commit>
git reset --keep <commit>
git reset --hard <commit>

| ----------------- | --------------------- | ----------------------------- | ------ | ------ |
| 文件修改          | --soft                | --mixed                       | --keep | --hard |
| ----------------- | --------------------- | ----------------------------- | ------ | ------ |
| commit的文件修改  | 放到staged area       | 放到unstaged area             | 丢弃   | 丢弃   |
|                   | 相当于撤销git commit  | 相当于撤销git commit和git add |        |        |
| ----------------- | --------------------- | ----------------------------- | ------ | ------ |
| staged文件修改    | 保留                  | 保留                          | 保留   | 丢弃   |
| ----------------- | --------------------- | ----------------------------- | ------ | ------ |
| unstaged文件修改  | 保留                  | 保留                          | 保留   | 丢弃   |
| ----------------- | --------------------- | ----------------------------- | ------ | ------ |
| 新增untracked文件 | 保留                  | 保留                          | 保留   | 保留   |
| ----------------- | --------------------- | ----------------------------- | ------ | ------ |

                                                 *git-reset-hard*
WARNING
`git reset --hard`会丢弃没有`git add`的文件更改，无法恢复！(Untracked Files不受影响)


如果不小心使用了 'git reset HEAD~3' 并希望恢复:
1. 'git reflog' 查找想要恢复的<commit>
2. 'git reset --hard <commit>' 恢复commit。

git reset --hard 操作建议 ~
使用git stash暂存没有`git add`的修改。保证git reset --hard时没有unstaged changes。
-------------------------------------------------------------------------------
                        *git-revert* *git生成逆向提交*  *git安全地撤销提交*

>
	git revert <commit>
<

暂时不生成提交，保存到暂存区
>
	git revert -n <commit>
<
-------------------------------------------------------------------------------
git checkout                                        *git-checkout*

'git checkout <commit_hash> -- <filename>' 是一个 Git 命令，用于将特定文件回滚到
某次提交的状态。'<commit_hash>' 是你想要回滚到的提交的哈希值，'<filename>' 是你想要
回滚的文件。

这个命令可以用来回滚部分文件，例如你可以使用 'git checkout HEAD~1 -- README.md' 来
将 'README.md' 文件回滚到上一次提交的状态。

如果你想要暂时跳转到某一次历史提交，你可以使用 'git checkout <commit_hash>'。然后，
当你想要回到原来的状态时，你可以使用 'git checkout <branch_name>'，'<branch_name>'
是你之前所在的分支的名称。

*撤销某一个文件的修改*			git checkout -- 文件名
git checkout 可以checkout部分文件到某一次提交/分支。可以用于回滚部分文件。

*git-checkout历史文件*			git checkout v0.2.2 -- markdown.vim

-------------------------------------------------------------------------------
git rebase --edit-timestamp            *git-rebase*

'git rebase --edit-timestamp' 是一个选项，可以在 'git rebase' 命令中使用。这个选项
会允许你在 rebase 过程中编辑每次提交的时间戳。

你可以使用 'git rebase -i --root' 来进入交互式 rebase 模式，并编辑每次提交的时间戳。

在你想要修改的提交前面，将 'pick' 改为 'edit'，然后保存并退出编辑器。然后，执行
'git commit --amend --date="<date>"' 来修改提交日期，'<date>' 是你想要设置的日期和
时间。最后，执行 'git rebase --continue' 来完成 rebase 操作。


*git-initial-commit*
`git rebase -i --root` 修改第一次commit

-------------------------------------------------------------------------------

*git提交把作者改成自己*				git commit --amend --reset-author --no-edit
*git回退版本*					git reset --soft 需要回退的commit hash
*git先暂存自己的修改，再pull别人的提交*		1) git stash 	2) git pull 	3) git pop

git stash适用于藏匿当前正在修改，但尚未commit的工作区。适合临时保存、切换工作区（比如临时hotfix）

-------------------------------------------------------------------------------
*git复制某一分支*				git remote set-url
*git合并commit* 				方法1)	git reset	方法2)	 git rebase -i HEAD~2

===============================================================================

*difftools*

https://github.com/Wilfred/difftastic
https://github.com/dandavison/delta
>
	git diff HEAD~1 | delta
	git blame -- vimrc | delta
<
https://github.com/so-fancy/diff-so-fancy

*git-diff/merge*

Git Diff ~
将当前文件和它倒数第3次提交历史版本diff |:Gdiffsplit|  >
	:Gdiffsplit HEAD~3:%
<
或者 |open-git-diff-vim|
>
	:GitDiffThis HEAD~3
<

*git-difftool*					git difftool HEAD mydoc.txt or git difftool -- mydoc.txt HEAD

|vimdiff|

|open-git-diff-vim| 插件

|fugitive| 插件

查看diff
:Git diff HEAD~1

列出diff文件到quickfix
:Git difftool HEAD~1

查看commit 11ad9622 下的当前文件
:Gedit 11ad9622:%

-------------------------------------------------------------------------------
Git Merge ~

Local和Remote ~

git checkout a, git merge  b时：a是local branch，b是remote branch
git checkout a, git rebase b时：b是local branch，a是remote branch

See: https://stackoverflow.com/questions/3051461/git-rebase-keeping-track-of-local-and-remote

*git-mergetool*

git列举所有unmerged文件			git diff --name-only --diff-filter=U --relative
git撤销某个提交的merged文件		git restore -m foo.txt
tutorial: https://gist.github.com/karenyyng/f19ff75c60f18b4b8149
插件:     https://github.com/samoshkin/vim-mergetool

NOTE: merge之后可以多按几次`]c`或`[c`, 防止有diff漏下

批量merge多个文件的流程 ~

通用vim命令 `:Git mergetool` , 在quickfix list加载所有unmerged file
可以用:SaveList 和 :LoadList 保存/加载quickfix list(在quickfix buffer下命令生效)

方案0: 直接修改unmerged文件 ~

例子来源于上面的tutorial
>
  root@DESKTOP-TI1H94P:~/galaxyZoo# git merge astrophy_objects
  Auto-merging astrophy_obj.txt
  CONFLICT (content): Merge conflict in astrophy_obj.txt
  Auto-merging foo.txt
  CONFLICT (add/add): Merge conflict in foo.txt
  Automatic merge failed; fix conflicts and then commit the result.
  root@DESKTOP-TI1H94P:~/galaxyZoo# git status
  On branch master
  You have unmerged paths.
    (fix conflicts and run "git commit")
    (use "git merge --abort" to abort the merge)

  Unmerged paths:
    (use "git add <file>..." to mark resolution)
	  both modified:   astrophy_obj.txt
	  both added:      foo.txt

  no changes added to commit (use "git add" and/or "git commit -a")
  root@DESKTOP-TI1H94P:~/galaxyZoo# cat foo.txt
  <<<<<<< HEAD
  abc
  ||||||| dbbf6d7
  =======
  def
  >>>>>>> astrophy_objects
<

方案1: 直接git mergetool开启merge ~

方案2: 基于vim-mergetool~

需要在.gitconfig中添加 >
  [merge]
    conflictStyle = diff3
  [merge]
    # tool = vimdiff
    tool = vim_mergetool
    conflictstyle = diff3
  [mergetool]
    keepBackup = false
  [mergetool "vim_mergetool"]
    cmd = vim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
    # When trustExitCode = true, checks exit code of merge tool process.
    # When trustExitCode = false, checks if MERGED file was modified.
    trustExitCode = true
    prompt = false
<

1) 利用上面的`:Git mergetool`或其它方式，打开需要merge的文件后， >
  :MergetoolStart/:MergetoolToggle 开始merge
  :MergetoolStop/:MergetoolToggle  结束merge(保存或撤销)
<

用:qa!退出vim会直接判断为merge成功

其它命令
:MergetoolDiffExchangeLeft       把右边的buffer应用到左边的MERGED文件
:GitUnmergedRawFzf FZF打开unmerged文件，直接编辑
:GitUnmergedFzf    FZF打开unmerged文件，然后:MergetoolStart

*clean-LOCAL-BASE-REMOTE-files*			git clean -i

基于抽象语法树（AST）级别进行Git冲突的自动合并 ~

*mergiraf* https://mergiraf.org/

===============================================================================
*git-clean*
*git-untracked-file*

git 删除untracked file
首先`git clean -n`，查看哪些文件会被删除
然后`git clean -f`
git 回滚untracked 修改
`git restore <file name>`

-------------------------------------------------------------------------------

*git-clone指定分支*

git clone -b vector_search https://github.com/oceanbase/oceanbase.git --depth=100

*Git在单体仓库中pull部分文件*

*monorepo*
$DOC2/cs/system/software_engineering/tools-open-source/git-github/monorepo.md

以clone [etcd/raft](https://github.com/etcd-io/etcd/tree/main/raft)为例

1) *partial-clone* >
  git clone --no-checkout https://hub.fastgit.org/etcd-io/etcd.git etcd_raft3 --depth=1 --filter=blob:none or git clone --no-checkout https://hub.fastgit.org/etcd-io/etcd.git etcd_raft3 --depth=1 --filter=tree:0
<

blob代表文件，tree代表文件夹。后者文件大小似乎略小一点。

2) *sparse-checkout* >
  cd etcd_raft3 git sparse-checkout init git sparse-checkout set '!/*/' '/raft/' git checkout main
<

当git版本>=2.32.0时，可以添加在`git sparse-checkout init`中添加`--sparse-index`选项进一步减小git文件大小，见 [https://git-scm.com/docs/git-sparse-checkout/2.32.0](https://git-scm.com/docs/git-sparse-checkout/2.32.0)

最后只有raft目录在项目文件夹中。 `git sparse-checkout list` 可以查看当前sparse-checkout的规则。

*git-shallow-clone*

https://marvinsblog.net/toolstory/git/#tips

shallow repository如果不能push，可以git fetch --depth=20
拉取更长的历史，以找到公共祖先
https://stackoverflow.com/questions/11375070/pushing-to-github-after-a-shallow-clone

*git-partial-clone*

参考资料:
https://github.blog/tag/monorepo/
https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/
https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/

-------------------------------------------------------------------------------
*git-submodule*

Git clone包含大量submodule的大仓库 ~
*git-clone-submodule*

ClickHouse有一个脚本 contrib/update-submodules.sh
See: https://clickhouse.com/docs/en/development/developer-instruction

>bash
    git clone --recursive --shallow-submodules https://github.com/ClickHouse/ClickHouse.git --depth=1 -j64
<

*git-submodule-add*

git submodule add --depth=1  ../onnxruntime.git onnxruntime
git submodule add 不能直接添加裸仓库(github可能存储了裸仓库，但会返回非裸仓库)

手动添加git submodule ~
git submodule add 会自动clone仓库。自动clone失败的时候，可以尝试手动
git clone ../onnxruntime.git
git submodule add ../onnxruntime.git onnxruntime

手动添加的.git目录是实际的目录，自动添加的.git是一个文件，记录了 |gitdir| 。

*git-submodule-deinit*
git submodule deinit 节省git仓库空间

git submodule只有.git文件/目录的解决方法
>bash
    git submodule deinit -f -- contrib/mariadb-connector-c
    git submodule update --init --depth=1 -- contrib/mariadb-connector-c
<
-------------------------------------------------------------------------------
*detached-git-directory* *git目录* *gitdir*

.git目录可以不在当前仓库中: .git可以是一个文件，里面包含类似下面的记录
>
	gitdir: /root/vimrc/.git/worktrees/vimrc-kiwi
<
类似软链接，表示gitdir的实际位置。

-------------------------------------------------------------------------------
git gc, git 减小.git目录大小                        *git-gc*
>bash
    git gc --prune=now --aggressive
<
-------------------------------------------------------------------------------
*git-flow*
*git-branch-model*

在旧版本上的功能开发（用于POC）、bug修复等，需要首先在master上开发，然后cherry-pick到旧版本。
好处：
1. 十分忙碌紧急的时候，防止在旧版本开发完，忘记cherry-pick到master。
2. 旧版本上的功能开发或bug修复commit B，可能依赖master中的过去某个commit A。如果直接在旧版本上实现，可能不会注意到
   commit A已经在新版本中实现了，导致重复写代码。
3. 平时一些master上的commit也会视情况cherry-pick到旧版本。保持cherry-pick关系的单向性，逻辑更加清晰。

*trunk-based-development*
https://trunkbaseddevelopment.com/
$DOC2/cs/system/software_engineering/tools-open-source/git-github/git-branch-model/note.md
*semver*
$DOC2/cs/system/software_engineering/version-control-and-release-model/semver.md
|monorepo|
$DOC2/cs/system/software_engineering/tools-open-source/git-github/monorepo.md

多人协作时，需要将本地master单分支开发模式切换为master-dev-feature... 多分支开发模式。
切换步骤如下:

在master分支中 >
  git branch dev
<

之后把master分支强行reset为远程master分支 >
  git reset --hard origin/master
<

创建新的dev分支，然后切换到dev分支中 >
  git checkout dev
<

在dev分支中，重新整理提交记录 >
  git reset <commit_hash>
<

*git-add-patch*
*git细粒度提交*
如果需要细粒度地提交，可以使用`git add -p <file>`。
git add -p会把文件的修改分成若干个更改块(hunks)，每个片段都可以选择是否提交。

或者使用`:GitGutterStageHunk`提交当前hunk。

如果需要临时切换到master分支，同时保留dev分支的修改，可以使用`git stash`。
*git-stash* 之后切回dev分支，使用`git stash pop`恢复修改。

可以在dev分支用`git merge master`，随时同主分支同步。

-------------------------------------------------------------------------------
*git-worktree* 多分支同时开发

好处:
1. 依赖隔离：`node_modules`被写入.gitignore中，假如多分支依赖的`node_modules`
不同，`git stash`不会改变`node_modules`

列举worktree >
	git worktree list
<

面对本地服务器+远程无法访问github的服务器同时修改提交的场景: 不可行 ~

git-worktree的.git是一个文件，里面记载了git本地仓库的绝对路径。
>
	gitdir: /root/vimrc/.git/worktrees/vimrc-kiwi
<
因此如果本地服务器和远程服务器的仓库目录不同，那么git worktree就会失效。


在gpudb-project-ictdb中，
git worktree add -b kiwi-dev ../gpudb-project-ictdb-kiwi-dev
之后本地都在gpudb-project-ictdb文件夹下开发，远程在gpudb-project-ictdb-kiwi-dev
文件夹下开发，rsync仅在gpudb-project-ictdb-kiwi-dev下拉取/推送文件

-------------------------------------------------------------------------------
*git-remote-只能pull不能push*

>bash
    # 设置 push 使用无效地址（禁用 push）
    git remote set-url --push origin "no-push"
<

*git把ssh远程服务器作为remote-repository*

NOTE: v0.16.0 后，不再使用 ~/vimrc/tools/rsync-vimrc.sh 同步git仓库。可以直接
用git同步。


两个服务器互相将对方的仓库设为远程仓库


远程服务器创建非裸仓库，直接在非裸仓库checkout machine/kiwi branch ~

*git-init-vimrc-in-remote-machine*

用例:
远程服务器kiwi连不了外网，本地机器将远程服务器kiwi的`/home/jiangyinzuo/vimrc`
作为远程仓库。本地服务器仅在main分支修改、push main分支，pull
machine/kiwi分支。kiwi仅修改kiwi分支。
>
	git init /home/jiangyinzuo/vimrc
<

本地服务器不能推送远程服务器当前检出的分支，会报'receive.denyCurrentBranch'。
>
	remote: error: refusing to update checked out branch: refs/heads/machine/kiwi
	remote: error: By default, updating the current branch in a non-bare repository
	remote: is denied, because it will make the index and work tree inconsistent
	remote: with what you pushed, and will require 'git reset --hard' to match
	remote: the work tree to HEAD.
	remote:
	remote: You can set the 'receive.denyCurrentBranch' configuration variable
	remote: to 'ignore' or 'warn' in the remote repository to allow pushing into
	remote: its current branch; however, this is not recommended unless you
	remote: arranged to update its work tree to match what you pushed in some
	remote: other way.
	remote:
	remote: To squelch this message and still keep the default behaviour, set
	remote: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
	To ssh://kiwi-nfd:/home/jiangyinzuo/vimrc
	 ! [remote rejected] machine/kiwi -> machine/kiwi (branch is currently checked out)
	error: failed to push some refs to 'ssh://kiwi-nfd:/home/jiangyinzuo/vimrc'
<

因此，kiwi不要检出main分支，保持检出machine/kiwi分支。
本地可以为machine/kiwi 分支添加worktree，方便频繁pull kiwi上的
machine/kiwi分支。

*git-bare-repo*
远程服务器创建裸仓库 ~
>
如果远程服务器仅作为存储，不需要checkout 提交，那么只需要在远程服务器创建裸仓库:
>
	git init --bare /home/jiangyinzuo/vimrc
<

裸仓库没有工作目录，它们主要用于存储 Git 数据（如提交历史、分支、标签等），而不用于直接编辑文件。
如果需要检出远程服务器，
方法1: 可以在`/home/jiangyinzuo/vimrc.git`目录下，创建worktree
>
	git worktree add ../vimrc machine/kiwi
<
方法1同样会receive.denyCurrentBranch，因为worktree也算检出分支。

方法2: 直接在`vimrc`目录`git init`
，将`/home/jiangyinzuo/vimrc.git`添加为remote URL

本地仓库添加远程仓库URL, 并推送 ~
>
	git remote add kiwi ssh://jiangyinzuo@kiwi:/home/jiangyinzuo/vimrc
	git push kiwi machine/kiwi
<

-------------------------------------------------------------------------------
*git-push*
git push commit bada2a1 to origin's master branch
>
	git push origin bada2a1:master
<

git只push一个tag
>
	git push origin v0.1.0
<
git push所有tags
>
	git push origin --tags
<
git删除远程的一个tag
>
	git push -d origin schedule-example@2.0.0
<

-------------------------------------------------------------------------------
*git-protocol* *git协议*

服务器上的 Git 协议 ~
https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE

git支持4种协议(local, ssh, http, git)

local协议指文件拷贝，可以是file://开头，也可以是文件路径。

git协议: git://github.com/User/Repository.git
ssh协议: git@github.com:User/Repository.git

git URL末尾的.git后缀在解析匹配时，有时候会自动添加/忽略后缀。
一般加上.git后缀表示强调这是个git repository。

利用local协议时无法`git clone`或者`git submodule update`。这是因为存在
CVE-2022-39253安全漏洞
https://github.blog/2022-10-18-git-security-vulnerabilities-announced/
可以通过
>
	git config --global protocol.file.allow always
<
绕过安全限制。

测试能否通过git协议访问github.com ~

>bash
    ssh -T git@github.com
<
若返回以下信息，说明可以通过git协议访问github.com
>
    Hi jiangyinzuo! You've successfully authenticated, but GitHub does not provide shell access.
<

-------------------------------------------------------------------------------
*获得当前git仓库根目录*

git rev-parse --show-toplevel
-------------------------------------------------------------------------------
*git-branch*

*git-设置主分支*

hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint:   git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint:   git branch -m <name>
-------------------------------------------------------------------------------
*git-mv* *git-grep* git对应的mv grep
-------------------------------------------------------------------------------
git生成patch ~

|git-diff| 生成的patch不带commit message。
>bash
    git diff > my_changes.patch
<
*git-format-patch* 生成的patch带commit message。
>bash
    git format-patch <commit_hash>
    git format-patch -1 <commit_hash>
<

git应用patch ~

如果文件路径不一致（如vim移植到neovim），可以手动编辑patch文件。

方法一: *git-apply-patch*
>bash
    git apply /path/to/my_changes.patch
<

方法二: *git-am*
应用patch，保留原本的提交信息（可以加`--signoff`）

>bash
    git am /path/to/patch-file.patch
<

使用 `git am` 时，补丁文件需要通过 `git format-patch` 创建，这样才包含了必要的提交信息。直接使用 `git diff` 生成的补丁文件不包含提交信息，不适合与 `git am` 一起使用。
-------------------------------------------------------------------------------
*git-co-author*

Github的规范

>gitcommit
    Co-authored-by: Jane Doe <jane.doe@example.com>
    Co-authored-by: John Smith <john.smith@example.com>
<

Co-author最好放commit message底部。
GitHub会根据提供的邮箱地址自动链接到对应的GitHub账户。
===============================================================================

*github-cli*

安装: https://github.com/cli/cli/blob/trunk/docs/install_linux.md

pull并检出github某个pr
>bash
    gh pr checkout https://github.com/milvus-io/milvus/pull/33173
<


===============================================================================

Git 命令行工具 ~

lazygit
fzf-git.sh https://github.com/junegunn/fzf-git.sh
git-flow

===============================================================================
Git Large File Storage (LFS) ~

克隆仓库时不自动下载大文件：

1. 克隆时禁用 Git LFS： 在克隆仓库时，你可以使用 `GIT_LFS_SKIP_SMUDGE=1` 环境变量来禁用自动下载 LFS 对象。命令如下：

>bash
   GIT_LFS_SKIP_SMUDGE=1 git clone <repository-url>
<
这个命令会克隆仓库，但不会下载 LFS 管理的文件。相反，它会下载这些文件的指针文件。

*git-lfs-pull*

2. 稍后按需下载文件：如果之后你需要某个或某些 LFS 管理的文件，可以使用 `git lfs pull` 命令下载它们。你可以选择性地指定一个文件路径或使用通配符来下载特定的 LFS 文件。

>bash
    git lfs pull
    # 只下载某个文件夹下的大文件
    git lfs pull --include="path/to/file"
    # 排除某些大文件
    git lfs pull --exclude="models/huge_model.bin
    # 开启 LFS 调试日志
    GIT_CURL_VERBOSE=1 GIT_TRACE=1 git lfs pull
<

3. 配置仓库以禁用自动下载: 如果你经常需要以这种方式工作，可以在仓库的配置中设置这个选项，这样每次克隆时都不会自动下载 LFS 文件。

>bash
   git config lfs.fetchexclude '*'
<
这将为当前仓库设置一个配置项，告诉 Git LFS 默认不下载任何文件。你可以在需要时手动下载特定文件。

使用这种方法，你可以更好地控制何时下载大文件，特别是在带宽有限或只需查看仓库历史记录时非常有用。

*git-lfs-临时目录空间不够*

>bash
    git config lfs.tempdir /path/to/your/large/tmp/dir
    # 或者
    TMPDIR=/path/to/your/big/tmp/dir git lfs pull


Smudge: 指的是当 git checkout 或 git pull 时，Git 将仓库中的 LFS 指针文件（一个很小的文本文件）替换为实际的大文件内容的过程。
Clean: 相反的过程，当你 git add 大文件时，Git 把大文件替换为指针，并将实际文件上传到 LFS 服务器。

===============================================================================
Xet 对 Git LFS的改进 ~

*xethub*

从文件到块: 提高 Hugging Face 存储效率 - Hugging Face的文章 - 知乎 https://zhuanlan.zhihu.com/p/27906353824

《Git is for Data》CIDR 2023 paper: https://xethub.com/blog/git-is-for-data-published-in-cidr-2023


===============================================================================
*git-mm*
华为资源多仓项目管理工具 https://www.devopschina.org/blog/devops/%E5%8D%8E%E4%B8%BA%E4%BA%91-devcloud-%E5%9C%A8%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%A2%E9%98%9F-git-%E5%8D%8F%E4%BD%9C%E7%9A%84%E6%8E%A2%E7%B4%A2/
