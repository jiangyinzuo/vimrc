vim:set ft=help:

*terminal-ai-agent.txt*

                     命令行AI工具 ~

=======================================================
命令行聊天

*shell-gpt* *sgpt*
>
	pip install shell-gpt
<
*github-copilot-cli* |github-cli|

https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli

Usage:
  copilot [command]

Examples:

$ gh copilot suggest "Install git"
$ gh copilot explain "traceroute github.com"

终端登录使用github copilot的方法（必须选择浏览器登录） ~

BROWSER=nonexistent gh auth login
https://github.com/cli/cli/issues/297

mods ~
https://github.com/charmbracelet/mods

=======================================================
命令行Agent

-------------------------------------------------------
Claude Code CLI                           *claude-code*

Neovim 插件 ~

greggh/claude-code.nvim
coder/claudecode.nvim

https://www.anthropic.com/engineering/claude-code-best-practices
https://github.com/hesreallyhim/awesome-claude-code

https://github.com/musistudio/claude-code-router
https://github.com/RonitSachdev/ccundo ccundo seamlessly integrates with Claude Code to provide granular undo functionality


Sub-agents ~

https://github.com/VoltAgent/awesome-claude-code-subagents
https://docs.anthropic.com/en/docs/claude-code/sub-agents

-------------------------------------------------------
Gemini CLI

Qwen Coder ~

基于Gemini CLI，可以运行deepseek。

OpenAI CodeX ~

运行deepseek可能有bug。

opencode.ai ~

社区开源Agent
暂时不支持手动编辑diff

charm CRUSH ~

社区开源Agent
暂时不支持手动编辑diff https://github.com/charmbracelet/crush/issues/698
charm 还有其它命令行工具, see https://charm.land/

Goose ~

社区开源Agent
暂时不支持手动编辑diff

AIDER ~

https://aider.chat/
不支持MCP、tool call

Amazon Q ~
仅支持MacOS https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html

不再维护 ~
https://github.com/AntonOsika/gpt-engineer

=======================================================
MCP

https://github.com/oraios/serena  *serena*
https://github.com/upstash/context7

=======================================================
Context

Codebase Indexing & Semantic Code Search ~

需要注意embedding model的能力，有些embedding model仅仅适用于自然语言，不适用于代码。

Features:

- 属性过滤，对文件路径、文件后缀等进行过滤
- 基于treesitter自定义chunk level

Repository Outline ~

整个代码仓库的结构化大纲，可以用ctags生成的tags。 |tags.txt|

>bash
    # python项目
    ctags  --extras=+q --kinds-python=-iY -R --sort=no .
    # postgresql项目
    ctags --languages=C,C++ --kinds-c=-hl --extras=+q -R --sort=no -o tags-nosort  .
<

LSP的方案还是使用terminal-agent或者MCP（如 |serena|）更好。

=======================================================
Use Cases

PostgreSQL项目代码理解 ~

基于Qwen Code
保存对话记录：/chat save postgresql-notes
恢复对话记录：/chat load postgresql-notes

1. 创建postgresql-notes文件夹，将其通过

>
    /directory add /usr3/jiangyinzuo_data/postgresql-notes
<
添加。

2. 运行/init，初始化项目，生成QWEN.md文件

3. Prompt: “请按照关系型数据库代码的组织架构，帮我先分析项目C代码的整体架构。我为你创建了/usr3/jiangyinzuo_data/postgresql-notes目录，你可以在该目录下创建任意多个markdown文件，作为源码理解阅读笔记"
