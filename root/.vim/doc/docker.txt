vim:ft=help
*docker*

-------------------------------------------------------------------------------
Docker磁盘空间清理 ~

https://blog.csdn.net/MinggeQingchun/article/details/125006782

无用的镜像和容器太多 ~

docker system df -v 查看单个image镜像、container容器空间占用细节，以确定是哪个镜像、容器或本地卷占用过高空间
docker system prune 命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像）
docker system prune -a 命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉

迁移/var/lib/docker目录 ~

https://cloud.tencent.com/developer/article/2020334
>bash
    systemctl stop docker
    mkdir -p /usr3/docker_data
    rsync -avzP /var/lib/docker /usr3/docker_data
<

修改/lib/systemd/system/docker.service文件：

在ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock后添加--data-root=/usr3/docker_data/docker

`--data-root string                        Root directory of persistent Docker state (default "/var/lib/docker")`

重启docker
>bash
    systemctl daemon-reload
    systemctl restart docker
<
删除原目录
>bash
    rm -rf /var/lib/docker
<

-------------------------------------------------------------------------------
*nvidia-docker*

Container Runtime ~

容器运行时（Container Runtime）是一组软件技术，用于在操作系统上创建、运行和管理容器。容器是一种轻量级的、可移植的、自包含的软件运行环境，它将应用程序及其依赖项打包在一起，以确保应用程序在不同环境中的一致性和可移植性。

容器运行时的主要功能包括：

1. 创建容器实例：根据容器镜像创建一个新的容器实例。
2. 运行容器：启动容器实例，使其开始执行。
3. 管理容器生命周期：包括暂停、恢复、停止和删除容器。
4. 资源隔离：确保容器内的进程不会影响宿主机或其他容器。
5. 资源限制：限制容器可以使用的CPU、内存、磁盘空间等资源。
6. 网络配置：为容器配置网络接口和IP地址，使其能够与外部通信。
7. 存储管理：管理容器的文件系统和持久化存储。

常见的容器运行时包括：

- Docker Engine：Docker是最著名的容器技术之一，它提供了自己的容器运行时。
- containerd：是一个行业标准的容器运行时，由CNCF（Cloud Native Computing Foundation）支持，Docker和Kubernetes都使用它作为后端。
- CRI-O：是一个轻量级的容器运行时，专为Kubernetes设计。
- Podman：是一个无需守护进程的容器引擎，由Red Hat开发，旨在提供与Docker相似的用户体验，但无需运行Docker守护进程。

容器运行时是容器生态系统中的关键组件，它为容器提供了必要的基础设施，使其能够在各种环境中高效、安全地运行。

想使用GPU，就需要安装Nvidia Container Runtime https://developer.nvidia.com/container-runtime

Docker能使用GPU的关键 ~

1. docker版本 >= 19.03
2. 安装nvidia-container-toolkit (含Nvidia Container Runtime)

>bash
    docker info | grep -E "(Runtime)|(Version)"
<

安装步骤 ~

nvidia-docker 被achieved了，使用 *nvidia-container-toolkit*
- https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html ⭐
- https://github.com/NVIDIA/nvidia-container-toolkit
- https://www.howtogeek.com/devops/how-to-use-an-nvidia-gpu-with-docker-containers/
- https://github.com/NVIDIA/nvidia-docker (achieved)

https://hub.docker.com/r/nvidia/cuda

nvidia-docker使用nvidia-smi，需要容器能访问GPU
>bash
    docker run --gpus all -it nvidia/cuda:11.0-base nvidia-smi
    # 或者
    docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi
<

FAQ

Q: unknown flag: --gpus
A: Docker版本过旧，需要Docker >= 19.03

-------------------------------------------------------------------------------
Ubuntu 18.04安装 docker

https://roychou121.github.io/2020/07/13/ubuntu-install-docker/

>
	# 添加docker GPG key
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

	# 添加docker源
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	
	sudo apt-get update
	sudo apt-get install docker-ce docker-ce-cli containerd.io

	# Nvidia docker
	distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
	curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
	curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

	sudo apt-get update
	sudo apt-get install nvidia-container-toolkit

	sudo systemctl restart docker
<

-------------------------------------------------------------------------------
CentOS 7安装最新版docker

See: https://blog.csdn.net/webrx/article/details/135091731
>bash
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    # 或使用aliyun速度更快
    sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    sudo yum install -y docker-ce docker-ce-cli containerd.io
<

-------------------------------------------------------------------------------
执行docker不加sudo / docker添加用户组

>bash
    sudo groupadd docker
    sudo gpasswd -a ${USER} docker
    sudo systemctl restart docker
<

然后退出ssh terminal，重新登录

-------------------------------------------------------------------------------
*docker国内镜像*

临时使用镜像：以pull ubuntu，使用 `docker.m.daocloud.io` 镜像站为例 `docker pull docker.m.daocloud.io/ubuntu`
永久使用镜像：更新 `/etc/docker/daemon.json`
>
	{
		"registry-mirrors": [
			"https://<阿里云镜像url>.mirror.aliyuncs.com",
                        "https://docker.m.daocloud.io"
		]
	}
<
阿里云容器镜像服务 ACR
也可以先docker login --username=xxx registry.cn-hangzhou.aliyuncs.com


重启docker
>
	sudo systemctl restart docker
	systemctl restart docker.service
<
验证配置`docker info`

*docker设置http代理*

https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy

Docker pull ~

Docker pull命令由systemd控制。所以要在`/etc/systemd/system/docker.service.d/http-proxy.conf`
文件中添加
>
	[Service]
	Environment="HTTP_PROXY=http://proxy.example.com:3128"
	Environment="HTTPS_PROXY=https://proxy.example.com:3129"
	Environment="NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp"
<
kiwi机器示例
>
	[Service]
	Environment="HTTP_PROXY=http://localhost:3128"
	Environment="HTTPS_PROXY=http://localhost:3128"
<
然后重启Docker
>
	sudo systemctl daemon-reload
	sudo systemctl restart docker
<

验证配置
>
	docker info
<
或者
>
	sudo systemctl show --property=Environment docker
	Environment=HTTP_PROXY=http://proxy.example.com:3128 HTTPS_PROXY=https://proxy.example.com:3129 NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp
<

See:
https://www.lfhacks.com/tech/pull-docker-images-behind-proxy/
https://docs.docker.com/config/daemon/systemd/#httphttps-proxy

如果在`docker pull ubuntu`期间报错
>
	Error response from daemon: manifest for hub-mirror.c.163.com/ubuntu:latest not found: manifest unknown: manifest unknown
<

说明proxy不支持https
modify your HTTPS_PROXY=https://****:port with HTTPS_PROXY=http://****:port instead.

Ref:
https://copyprogramming.com/howto/error-response-from-daemon-get-http-s-registry-1-docker-io-v2-proxyconnect-tcp-tls-first-record-does-not-look-like-a-tls-handshake

Docker build 过程中 apt-get update ~

添加build arg，但proxy不能是localhost，必须写成宿主机内网IP(10.208.130.1)
似乎不需要添加/etc/apt/apt.conf.d/proxy.conf
>
	docker build \
	--build-arg "HTTP_PROXY=http://proxy.example.com:8080/" \
	--build-arg "HTTPS_PROXY=http://proxy.example.com:8080/" \
	--network host # 可能需要
<
-------------------------------------------------------------------------------
*docker启动开发容器*

>bash
    docker run -it \
    --name jiangyinzuo-dev2.1 \
    --privileged \
    --pid=host --network=host \
    --ulimit core=-1:-1 \
    --user slave1 \
    --group-add 1005 \
    --shm-size=64g \
    -v /sys/kernel/debug:/sys/kernel/debug \
    -v /lib/modules:/lib/modules:ro \
    -v /usr/src:/usr/src:ro \
    -v /data1/jiangyinzuo/jiangyinzuo-dev2-data/:/jiangyinzuo-dev2-data \
    <镜像ID/名称> bash
<

--network=host  容器共享宿主机网络空间
--ulimit core=-1:-1 coredump文件大小不受限制
--shm-size=64g /dev/shm 共享内存大小64g

*docker宿主机和容器内两个用户共享文件夹*

>bash
    # 创建共享用户组
    sudo groupadd sharedgroup
    # 将宿主机用户jiangyinzuo加入共享用户组
    sudo usermod -aG sharedgroup jiangyinzuo
    # 创建共享目录，设置目录所有权，添加setgid位
    sudo mkdir -p /data1/jiangyinzuo/jiangyinzuo-dev2-data
    sudo chown :sharedgroup /srv/dev-data
    sudo chmod g+s /srv/dev-data
    # 设置ACL
    # 规则1：新文件的所属组(sharedgroup)默认拥有 rwx 权限
    sudo setfacl -d -m g:sharedgroup:rwx /data1/jiangyinzuo/jiangyinzuo-dev2-data
    # 规则2：新文件的所有者默认拥有 rwx 权限
    sudo setfacl -d -m u::rwx /data1/jiangyinzuo/jiangyinzuo-dev2-data
    # 规则3：其他用户默认拥有 r-x 权限
    sudo setfacl -d -m o::r-x /data1/jiangyinzuo/jiangyinzuo-dev2-data
    # 查看sharedgroup的GID（假设为1005）
    getent group sharedgroup
<

随后，在docker run -it的时候添加以下参数：

-v /data1/jiangyinzuo/jiangyinzuo-dev2-data/:/jiangyinzuo-dev2-data
--user slave1
--group-add 1005
把容器内的slave1用户也加入1005用户组，用于宿主机和容器共享 `jiangyinzuo-dev2-data/` 目录权限


*docker容器内运行perf*
>bash
    # 验证有没有挂载tracefs或者debugfs
    ls -l /sys/kernel/debug/tracing/events/sched/sched_switch/id
    mount | grep -E 'tracefs|debugfs'
<

--pid=host  容器内可以看到宿主机的进程
-v /sys/kernel/debug:/sys/kernel/debug
在某些Linux发行版可能是 `/sys/kernel/tracefs` ，容器内可以使用perf工具

-v /lib/modules:/lib/modules:ro \
-v /usr/src:/usr/src:ro \
绑定 kernel headers（/lib/modules、/usr/src）方便 bcc/bpftrace 编译 BPF 程序。
可以看内核/模块函数名

----------------
开发OpenGauss使用的创建容器命令
>bash
	docker run -it --name jyz-openeuler --network=host --privileged -e http_proxy=http://localhost:3128 -e https_proxy=http://localhost:3128 -e LANG=$LANG -e LC_ALL=$LC_ALL -v /usr3/jiangyinzuo_data:/data openeuler/openeuler:22.03
bash
	docker run -it --name jyz-centos7.6 --network=host --privileged -e http_proxy=http://localhost:3128 -e https_proxy=http://localhost:3128 -e LANG=$LANG -e LC_ALL=$LC_ALL -v /usr3/jiangyinzuo_data:/data centos:centos7.6.1810 bash
<

starrocks: https://docs.starrocks.io/zh/docs/developers/build-starrocks/Build_in_docker/
>bash
	docker run -it -v /usr3/jiangyinzuo_data/:/data --network=host --privileged -e http_proxy=http://localhost:3128 -e https_proxy=http://localhost:3128 -e TERM=$TERM -e LANG=C.UTF-8 -e LC_ALL=$LC_ALL --name  jyz-starrocks -d 93aa59ce2c45
<

LANG/LC_ALL变量：解决中文乱码，见 https://blog.csdn.net/listen_wq/article/details/117737035

继承宿主机的TERM=xterm-256color
>bash
    docker exec -it -e TERM=$TERM jyz-starrocks bash
<
