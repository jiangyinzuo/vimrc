vim:set ft=help:
*ai.txt*

IDE功能需求 ~

https://docs.cursor.com/get-started/usage

Tab

Completion
- fill in the middle (给定前缀和后缀，补全中间)
- 多位置complete (speculative edits / edit prediction / Editing By Rewriting)
  - https://github.com/milanglacier/minuet-ai.nvim/issues/26
  - Zed开源了一个edit-prediction model https://zed.dev/blog/edit-prediction
    - https://github.com/boltlessengineer/zeta.nvim [WIP]

补全插件:
- gergap/vim-ollama

Chat
- code rewrite
- code generation

Context
- codebase indexing (project files)
    - https://github.com/Davidyz/VectorCode
- rag

Products ~

perplexity

cursor.com
- Code Generation
- Multi-Line Edits
- Smart Rewrites
- Cursor Prediction

notion.so 文档管理APP

Github Copilot
tabnine
codegeex
codeium https://codeium.com/
- windsurf https://codeium.com/windsurf
CodiumAI https://www.codium.ai/
阿里 通义灵码 https://tongyi.aliyun.com/lingma/download
百度 文心快码 https://comate.baidu.com/zh
字节 豆包MarsCode https://www.marscode.cn/

💁 需要从终端复制Vim屏幕的文字，调用豆包桌面版功能时，可以先`set mouse=vi`
（没有n，normal模式下禁用鼠标）来禁用Vim的鼠标响应。

deepseek https://www.deepseek.com/

fitten code
- https://github.com/FittenTech
- https://github.com/luozhiya/fittencode.nvim

continue.dev https://github.com/continuedev
SuperMaven https://github.com/supermaven-inc/supermaven-nvim
sourcegraph
cline https://github.com/cline/cline

devin
https://www.cognition.ai/
https://www.cognition-labs.com/blog
全球首个AI程序员诞生，码农饭碗一夜被砸，10块IOI金牌华人团队震撼打造，996写代码训练模型
https://36kr.com/p/2687396960595333
首个AI程序员造假被抓，Devin再次“震撼”硅谷！扒皮详解附上
https://baijiahao.baidu.com/s?id=1796288440437763473&wfr=spider&for=pc

gpt-pilot
https://github.com/Pythagora-io/gpt-pilot

aichat cli
https://github.com/sigoden/aichat

https://www.swebench.com/

https://www.kajetandomagala.com/codeium-vs-copilot/

Poe https://poe.com/

OpenAI assistants (beta) ~

Moonshot AI 传文件
https://platform.openai.com/docs/assistants/overview

-------------------------------------------------------------------------------
命令行AI工具

*shell-gpt* *sgpt*
>
	pip install shell-gpt
<
*github-copilot-cli* |github-cli|

https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli

Usage:
  copilot [command]

Examples:

$ gh copilot suggest "Install git"
$ gh copilot explain "traceroute github.com"

终端登录使用github copilot的方法（必须选择浏览器登录） ~

BROWSER=nonexistent gh auth login
https://github.com/cli/cli/issues/297

*gpt-engineer*
https://github.com/gpt-engineer-org/gpt-engineer

Amazon Q 仅支持MacOS https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html

-------------------------------------------------------------------------------
Vim插件

https://github.com/neovim/neovim/discussions/28162

- https://github.com/olimorris/codecompanion.nvim

OpenAI 兼容 API ~

*g:openai_token_file* *g:openai_endpoint* *g:openai_model*

temperature越高，生成的文本越随机。chatgpt默认temperature值为0.7

API集合 https://openrouter.ai/

>vim
    " vim-ai
    let g:openai_token_file = "~/.config/openai.token"
    " avante.nvim
    export OPENAI_API_KEY=...

    " deepseek
    let g:openai_endpoint = "https://api.deepseek.com/v1"
    let g:openai_model = "deepseek-chat"

    " doubao
    let g:openai_endpoint = "https://ark.cn-beijing.volces.com/api/v3"
    " 见火山引擎控制台
    let g:openai_model = "..."

    " aiproxy (2025年8月后停用)
    let g:openai_endpoint = "https://api.aiproxy.io/v1"
    let g:openai_model = "gpt-4"

    " openrouter

    " ppinfra https://ppinfra.com/
    let g:openai_endpoint = "https://api.ppinfra.com/v3/openai"

    " uiuiapi https://sg.uiuiapi.com/
    let g:openai_endpoint = "https://sg.uiuiapi.com/v1"

    " kimichat
    let g:openai_endpoint = "https://api.moonshot.cn/v1"
    let g:openai_model = "moonshot-v1-8k"

    " 01ai: https://platform.lingyiwanwu.com/docs
    let g:openai_endpoint = "https://api.lingyiwanwu.com/v1"
    let g:openai_model = "yi-34b-chat-0205"

    " 阿里云Qwen
    let g:openai_endpoint = "https://dashscope.aliyuncs.com/compatible-mode/v1"
    let g:openai_model = "qwen-plus"

    " 硅基流动
    let g:openai_endpoint = "https://api.siliconflow.cn/v1"
    let g:openai_model = "deepseek-ai/DeepSeek-V3"
    let g:openai_token_file = "~/.config/siliconflow.token"

    " https://4.0.wokaai.com/topup
<

Claude 兼容 API ~

https://api.mjdjourney.cn

-------------------------------------------------------------------------------
本地部署大模型

*ollama* https://github.com/ollama/ollama

-------------------------------------------------------------------------------
LLM Agent

benchmark ~

swe-bench (ICLR 2024) https://www.swebench.com/


LLM Agent 开发框架 ~

7种Agent框架对比: https://www.helicone.ai/blog/ai-agent-builders

Dify (无代码)
llama_index https://github.com/run-llama/llama_index
langchain
eino https://github.com/cloudwego/eino
crewAI https://github.com/crewAIInc/crewAI
autogen https://github.com/microsoft/autogen
pydantic ai https://github.com/pydantic/pydantic-ai

现成LLM Agent ~

feature 需求：

- 全局代码理解
- bug定位

aider https://aider.chat/
- 不支持使用命令行tool、不能运行程序，读取程序输出

SWESynInfer: https://github.com/LingmaTongyi/Lingma-SWE-GPT
- 开源缺乏维护

AutoCodeRover: Autonomous Program Improvement https://github.com/AutoCodeRoverSG/auto-code-rover
Agentless https://github.com/OpenAutoCoder/Agentless
SWE-Agent https://github.com/SWE-agent/SWE-agent
OpenHands https://github.com/All-Hands-AI/OpenHands

Tool Use ~
https://github.com/dlants/magenta.nvim
