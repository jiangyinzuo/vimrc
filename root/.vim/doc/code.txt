vim:ft=help
*code-search* *novimrc* *noplugged*

打开历史文件 ~
|:oldfiles| 查看oldfiles
|c_#<|
`:command #<n`用:command打开第n个历史文件, 例如
>
	:e #<3
<
打开第3个历史文件

查找文本 ~
:vim /func main/ **/*.txt
:grep def foo.py
:grep 'def foo' foo.py
全字匹配
:grep -w def foo.py

文件内case insensitive search
/\chello

使用grep ~
`grep 'func main' -r --exclude tags .`
`grep 'func main' ~/hello.go` 查找~/hello.go文件中的func main
`grep -i` 忽略大小写
`grep -w` 全字匹配

使用ripgrep ~
可以添加.rgignore/.ignore文件, 用于忽略文件
设置|grepprg|为rg
>
	set grepprg=rg\ --vimgrep
<

查找文件 ~
>
	:find **/*.py
<
按Tab键自动补全

`find . -name 'scheduler*.py'`
`find -type f`  查找文件
`find -type d`  查找目录

使用fd ~
可以添加.fdignore/.ignore文件, 用于忽略文件
https://github.com/sharkdp/fd

其它 ~
`tldr find`
`tldr grep`

|tagsystem|

-------------------------------------------------------------------------------
|ctags|

创建tags
ctags -R .

:ta main
CTRL-]

其它 :h tags

-------------------------------------------------------------------------------
|gtags|

:set csprg=gtags-cscope

创建gtags数据库
gtags

vim连接数据库
:cs add GTAGS

使用其它前端解析(注意.globalrc配置文件, 可以从/etc/gtags.conf, /etc/gtags/gtags.conf复制)
pip install pygments
GTAGSLABEL=pygments gtags
GTAGSLABEL=native-pygments gtags

查找文件
:cs f f hello
查找符号
:cs f s main

也可以用`:cstag <ident>`命令查找符号

-------------------------------------------------------------------------------
|coc.nvim|

cmake可以在不执行编译的情况下生成compile_commands.json文件

-------------------------------------------------------------------------------
代码质量检查 ~

https://www.sonarsource.com/

-------------------------------------------------------------------------------
文档生成 ~

doxygen https://www.doxygen.nl/
-------------------------------------------------------------------------------
补全
See: complete.md

-------------------------------------------------------------------------------
SCIP
SCIP - a better code indexing format than LSIF https://sourcegraph.com/blog/announcing-scip
===============================================================================
NOTE: 搭环境考验

大型单文件考验 ~

4万行的Oceanbase单源文件。

https://github.com/oceanbase/oceanbase/blob/develop/src/rootserver/ob_ddl_service.cpp

据Vscode用户描述

- clangd可能会非常慢(显示diagnostic可能需要2-3分钟以上）
- 某些重命名功能可能会失败
	- clangd重命名功能可能要等1-2分钟，或者coredump
	- 机器内存不够可能导致clangd coredump

或许需要选择性关闭某些功能。

寻找大文件的方法: `find . -type f -size +1M`

40核kiwi服务器，128GB内存：
- 第一次下载依赖文件，编译项目花费19分钟
- clangd索引构建11:08~12:02，花了近一小时
- 重命名功能报错
	- clangd: -32001: The number of affected files exceeds the max limit 50
	- `:Far ObTableSchema ObTableSchema222 src/**/*.cpp src/**/*.h` 运行1~2秒，但 `:Far ObTableSchema ObTableSchema222 src/**/*.*` 会卡顿很久
	- `:Rg` 很快

