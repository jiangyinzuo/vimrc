vim:ft=help
===============================================================================
*gdb-dap.txt*

https://github.com/hellogcc/100-gdb-tips

-------------------------------------------------------------------------------
gdb插件 ~

- https://github.com/hugsy/gef
- https://github.com/cyrus-and/gdb-dashboard

-------------------------------------------------------------------------------
step -> step in
next -> step over
finish -> step out
continue -> continue

条件断点 *conditional-breakpoint*

gdb `b <line> if <condition>`
nvim-dap `:lua require("dap").toggle_breakpoint("i == 3")`

*gdb调试.so*

`gdb libraft.so` 可以调试动态链接库。

info sharedlibrary: 查看加载的库。

info sources: 查看源文件。

💁 可以通过`info sources`检查一个第三方动态库是否包含了调试信息（-g）。
如果`info sources`只有能被include的头文件， 缺乏cpp源文件，那么这个库没有包含调试信息。

*gdb-attach-进程*

首先通过`ps -a`查看进程号。

== 方法1.1 ==
>bash
    gdb /path/to/your/program
<
然后
>
    (gdb) attach <pid>
<

== 方法1.2 ==
>bash
    gdb
<
然后
>
    (gdb) file <path/to/your/program>
    (gdb) attach <pid>
<

== 方法2 ==

Termdebug中可能会导致Vim卡住，最后失去:Break等命令

>bash
    gdb -p <pid>
<

如果碰到`ptrace: Operation not permitted`，可以临时设置

>bash
    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
    sudo sysctl -p
<

gdb 处理 signal ~

>
    (gdb) handle <signal> <keywords…>
<

*gdb多线程调试*

set scheduler-locking on: 只允许当前线程运行，其他线程完全冻结。
set scheduler-locking step: 仅在单步执行 (next, step 等) 时锁定当前线程。
set scheduler-locking off: GDB 不干涉调度，所有线程自由运行。默认模式。用于观察线程间的自然交互。

set non-step off: 一旦中断，所有线程都会被暂停（默认）
set non-stop on: 命中断点时只暂停该线程，其他线程继续运行。: 调试复杂的实时交互、竞争条件等高级场景。

thread <ID> 切换到ID线程
info threads 查看所有线程
thread apply all <command> 对所有线程执行command
thread apply <ID> <command> 对ID线程执行command

gdb查看栈: bt 数字
gdb切换某个栈: f[rame] 数字

-------------------------------------------------------------------------------
*gdb-time-travel*

GDB反向调试：让程序逆序执行，代码调试原来这么简单！体验时光旅行的快感！

https://blog.csdn.net/xzh203/article/details/135820495

-------------------------------------------------------------------------------
ChatGPT

set scheduler-locking step和off和on有什么区别 ~

在`gdb`中，`set scheduler-locking`选项可以用来控制在多线程程序中哪些线程被允许运行。它有几个可能的值，包括`off`, `on`和`step`。下面是它们的差异：

1. off：
    
    * 这是默认设置。
    * 当一个线程停止时，其他线程仍然可以继续执行。
    * 换句话说，`gdb`不会锁定调度程序，允许所有线程自由地运行。
2. on：
    
    * 当一个线程停止时，所有其他线程也会被自动暂停。
    * 这样，只有当前被调试的线程可以运行，直到你明确地让其他线程继续执行。
3. step：
    
    * 这是一个中间设置。
    * 只有在执行单步命令（如`step`, `next`）时，当前线程可以运行，而所有其他线程被冻结。
    * 当你使用`continue`命令时，所有线程都将被允许运行，直到下一个断点或其他停止事件。

选择哪个选项取决于你在调试多线程程序时想要的控制级别。如果你想要完全地控制哪个线程在任何时候运行，使用`on`可能是最好的。如果你只关心当前线程并希望在单步执行时防止其他线程干扰，那么`step`是一个好的选择。而如果你想要一个更自由的环境，其中线程大部分时间都在运行，那么`off`可能更合适。

finish命令在step设置中，其它线程会被冻结吗 ~

在 `gdb` 中，当 `scheduler-locking` 设置为 `step` 时，其他线程主要在使用像 `step` 和 `next` 这样的单步命令时被冻结。但对于 `finish` 命令，情况略有不同。

`finish` 命令的作用是继续执行当前线程，直到从当前函数返回。在执行这一命令时，由于它不是真正的单步命令，而是一个使线程继续运行的命令（只是运行到特定的位置，即函数返回点），因此，当 `scheduler-locking` 设置为 `step` 时，其他线程不会被冻结，它们也会被允许运行。

所以，简短的回答是：使用 `finish` 命令时，即使 `scheduler-locking` 被设置为 `step`，其他线程也不会被冻结。

哪些命令是单步命令，为什么 ~

在`gdb`中，单步命令允许开发者在代码中一步步地前进，同时观察每一步的效果。以下是几个常用的单步命令：

1. **step** (`s`):
    * 执行程序直到到达一个新的源代码行。
    * 如果当前行调用了一个函数，则进入该函数并停在第一行。
2. **next** (`n`):
    * 与`step`类似，它执行程序直到到达一个新的源代码行。
    * 但是，如果当前行有一个函数调用，`next`命令将执行整个函数，然后停在调用该函数的下一行。
3. **stepi** (`si`):
    * 按单个机器指令执行程序。
    * 如果当前指令是一个函数调用，`stepi`会进入该函数。
4. **nexti** (`ni`):
    * 与`stepi`类似，它按单个机器指令执行程序。
    * 但是，如果当前指令是一个函数调用，`nexti`会执行整个函数，然后停在调用该函数的下一条指令。

为什么我们需要单步命令？ ~

单步命令在调试过程中非常有用，因为它们允许开发者细粒度地控制程序的执行，同时观察程序状态的每一个小变化。这样，开发者可以更容易地找到错误，理解代码的行为，以及诊断问题。

例如，使用`step`，开发者可以深入函数调用，看看函数内部发生了什么，而使用`next`，开发者可以跳过对已知函数的调用，专注于当前正在调试的代码。这为开发者提供了多种方式来逼近和诊断问题。

finish和continue为什么不是单步命令 ~

在`gdb`中，`finish`和`continue`命令不被视为单步命令，主要基于它们的操作和目的。

1. **finish**：
    
    * 当你在某个函数内部停止时，`finish`命令允许你执行当前函数直到它返回，然后暂停执行。
    * `finish`的目的是“跳出”当前函数，而不是逐行执行它。
2. **continue** (`c`):
    
    * `continue`命令简单地继续执行程序，直到遇到下一个断点、观察点或其他停止条件。
    * 它的目的是从当前停止的位置继续执行，而不是单步前进。

单步命令的目的是允许开发者逐行（或逐指令）执行程序，这样他们可以密切地观察代码的行为和程序状态的变化。而`finish`和`continue`的目的更多地是在代码中移动，而不是密切地观察每一行或每一条指令的效果。

所以，虽然`finish`和`continue`都是控制程序执行的命令，但它们的目的和操作方式与单步命令不同，因此它们不被视为单步命令。

-------------------------------------------------------------------------------
*coredump*

*gdb调试coredump*

>
	gdb <executable> <coredump_file>
<

临时会话生成coredump ~

>
	# 设置 coredump 文件大小无限制
	ulimit -c unlimited

	# 设置coredump文件名
	echo '/tmp/core.%e.%p.%t' | sudo tee /proc/sys/kernel/core_pattern
<

coredumpctl 生成backtrace |dev-tools-backtrace|
https://neovim.io/doc/user/dev_tools.html#dev-tools-backtrace

-------------------------------------------------------------------------------
*debug-adapter*

vimspector中调试多线程C++程序。

直接执行gdb命令: -exec command

For the C++ (GDB/LLDB) debugging environment, you can execute GDB, LLDB and LLDB-MI commands directly through the debug console with the -exec command, but be careful, executing commands directly in the debug console is untested and might crash VS Code in some cases.

codelldb的执行速度比vscode-cpptools快。因为codelldb是Rust实现，vscode-cpptools是TypeScript实现。
-------------------------------------------------------------------------------
*lldb*  https://lldb.llvm.org/

可能比gdb更好用的调试器。

