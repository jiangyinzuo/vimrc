vim:ft=help

*mydoc.txt*

                                My Documents~

===============================================================================

*vim-helpfiles-cheetsheet* https://devhints.io/vim-help

|netrw|
选中打开/折叠文件夹	鼠标左键
新建文件夹		d
在当前文件夹下新建文件	%
删除文件/文件夹 D
-------------------------------------------------------------------------------

*往下/上翻1页*		CTRL-F CTRL-B
*往下/上翻半页*		CTRL-D CTRL-U

*Vim自带插入补全*	Insert mode completion			|ins-completion|

*Neovim和vim使用同样的插件*	.config/nvim/init.vim中`let g:nvim_compatibility_with_vim = 1`
*fold*

https://vim.fandom.com/wiki/Folding
*折叠右花括号*	`zfa}`	`va}zf`

*auto-completion* https://zhuanlan.zhihu.com/p/106309524
*重复执行上一个命令* @:

*计算器* *calculator*
https://vimtricks.com/p/vim-calculator/

|command-mode|
*命令command模式下粘贴* CTRL-R"
*命令command模式下cursor移动到开头*	CTRL-B
*命令command模式下cursor移动到结尾*	CTRL-E
*命令command模式下复制命令*	CTRL-F 打开包含命令的窗口，之后选中复制

*goto-file* gf gF CTRL-Vgf CTRL-VgF
*跳转到上一次文本变更的位置*  |g;| |:changes|

*increment-number* |CTRL-A|

*next-in-search-mode* *查找模式下的n和N* CTRL-G CTRL-T
*put-vim-progress-to-the-background* CTRL-Z, see linux tool `fg`, `bg`.
*select-history-command* `q:`

*搜索并替换整个文件中的第一个模式* `:/pattern/s//replace/`
解释：
:/pattern/s: 在满足pattern的第一行的范围下，执行:s command
//: 搜索模式为空时，默认使用上一个模式
/replace/: 替换模式
See: https://vi.stackexchange.com/questions/7194/how-to-substitute-the-first-occurrence-across-the-whole-file

substitute的flag见 |:s_flags|

*macro* |q| |recording|
Each register is identified by a letter a to z or number 0-9 or ".
recording a macro: >
  qd	start recording to register d
  ...	your complex series of commands
  q	stop recording
  @d	execute register d (your macro)
  @@	execute your macro again
<

*terminal-window-executes-shortcuts* CTRL-W{shortcuts}

进入 |Terminal-Normal| 模式
|Terminal-mode| CTRL-WN
隐藏终端 CTRL-W:hide

*split-window-with-height-10-and-open-buffer-1* `:10sp #1`

*add-to-the-end-of-line* `:%s/$/ galaxy/g`
*add-to-the-begin-of-line* `:%s/^/hello /g`
*put-grep-results-into-quickfixlist-then-execute-by-cdo* `:cdo %s/<search term>/<replace term>/cg`

-------------------------------------------------------------------------------
Undo System ~

|undo-redo|

1. *undo-system*

https://irian.to/blogs/learn-how-to-use-vim-undo-to-time-travel/
|undo-tree| |undo-branches| |undotree()|

undo: |u| |g-|
redo: |CTRL-R|  |g+|

|g-|和|u|的区别：|g-|优先回退到undotree的上一个兄弟节点，|u|直接回退到undotree
的父节点

See: https://vi.stackexchange.com/questions/11537/difference-between-g-and-u

2. |persistent-undo|
3. *time-travel*
-------------------------------------------------------------------------------

*find-files* (vim will be blocked if directory is too large) >
  set path+=**
  :find <file>
<
*marks*
mark: `ma`
jump: `'a`

-------------------------------------------------------------------------------
*lsp* *formatter* *linter*

|c-cpp-cuda|

Rust ~

`rustup component add rust-analyzer` 需要GLIBC2.28

Go ~
*gopls*
可以通过vim-go下载后，配置环境变量

OCaml ~
*ocaml-lsp*
ocaml: ocaml-lsp(不直接通过`opam user-setup install`使用merlin)  

*ocamlformat*

https://github.com/ocaml-ppx/ocamlformat

-------------------------------------------------------------------------------
*paste-to-fzf-popup-window*

"+y           yank to system
CTRL-SHIFT-V  paste

-------------------------------------------------------------------------------
*mydoc-vim-visual-multi*

*vim-visual-multi选中words创建cursor*	CTRL-N
*vim-visual-multi通过Up/Down创建cursor*	CTRL-Down CTRL-Up
*vim-visual-multi创建cursor*		\\\
-------------------------------------------------------------------------------

*打开所有折叠*		zR

-------------------------------------------------------------------------------

*z* 模糊跳转autojump
zt: 根据最近cd时间排序目录，并通过fzf cd目录, 依赖z

*vimt* tex
-------------------------------------------------------------------------------
*fzf跳转* 	fzfcd ALT-C
*fzf补全*	CTRL-T：递归搜索当前文件夹下文件
		CTRL-R：历史命令

*fzf查找文件夹并跳转* cd ** <TAB> 	
*rfv*		ripgrep grep找文件，fzf模糊查找，最后vim打开文件
*rffv*		ripgrep搜索文件，fzf模糊查找，最后vim打开文件
*rga* *rgi*	ripgrep查找各种类型的文件
*rga-fzf*	ripgrep查找各种类型的文件（不支持pptx），fzf模糊查找，最后打开文件
*rgi-fzf*	ripgrep查找各种类型的文件（支持pptx），fzf模糊查找，最后打开文件

-------------------------------------------------------------------------------
*junegunn/fzf-git.sh*	https://github.com/junegunn/fzf-git.sh/

CTRL-G CTRL-F for Files
CTRL-G CTRL-B for Branches
CTRL-G CTRL-T for Tags
CTRL-G CTRL-R for Remotes
CTRL-G CTRL-H for commit Hashes
CTRL-G CTRL-S for Stashes
CTRL-G CTRL-E for Each ref (git for-each-ref)

-------------------------------------------------------------------------------

https://stackoverflow.com/questions/39973214/how-to-display-the-hex-value-in-the-watch-panel-of-vs-code
*vimspector以十六进制方式查看expression*	<expr>,h

-------------------------------------------------------------------------------
*Visual模式选中后，在外围添加大括号* <c-s>{


-------------------------------------------------------------------------------
*custom-text-objects*

https://github.com/kana/vim-textobj-user

-------------------------------------------------------------------------------
索引查找 ~

1. 基于文本匹配的查找
ripgrep, grep

|any-jump.vim| https://github.com/pechorin/any-jump.vim
在不同的位置:AnyJump同一个word，结果会不一样。

在注释处`:AnyJump`可能只会找到注释；在cpp类的方法实现处`:AnyJump`才会跳到类的定义。
cpp需要rg with PCRE2 support

2. 基于tag符号的索引/补全 |tags.cnx|

3. 基于LSP的索引/补全 |lsp|

4. 基于AI的补全

|ai.txt|

-------------------------------------------------------------------------------
远程开发环境对比 ~

1. sourcegraph/github/devv.ai: *在线代码阅读* *code-search-online*

2. 本地开发环境+远程文件系统：sshfs/rclone/ |rsync| 同步

适用于本地有开发环境，远程没有搭开发环境的场景

3. vscode+neovim插件 ssh remote

优点：无需在服务器安装高版本(neo)vim、无需OSC就可以复制粘贴远程服务器上的文本，
方便查看渲染后的pdf/网页/markdown
缺点：面对跳板机环境不方便

VsCode 1.86 不再支持Ubuntu 18.04
https://code.visualstudio.com/updates/v1_86
>
	In this milestone, we have updated the toolchains to build our desktop client. From this release onwards, VS Code desktop is only compatible with Linux distributions based on glibc 2.28 or later, and glibcxx 3.4.25 or later, such as Debian 10, RHEL 8, or Ubuntu 20.04.
<

案例：
《智能计算系统》课程实验，Ubuntu16.04 vim7.4 python2.7
docker容器，容器内有许多课程独有的基于深度学习处理器（DLP）的依赖，
必须用它的docker容器开发环境。不方便编译安装vim8。SSH比较卡。

4. (neo)vim
优点：在跳板机环境、临时服务器环境（无插件配置）下比较方便
缺点：在低版本操作系统中编译安装高版本(neo)vim和插件比较麻烦，不用sshfs时，
查看渲染后的pdf/网页/markdown比较麻烦，ssh网速慢的时候卡顿严重。
某些创业公司的新应用可能优先提供vscode官方插件，不提供vim插件。

5. Jetbrains Fleet

6. [distant](https://github.com/chipsenkbeil/distant)

-------------------------------------------------------------------------------
*:Open* 打开文件
*g:default_open_prefixes* 控制打开文件的前缀

Example:
>
	let g:default_open_prefixes = [['*.md', '.'], 
				\ ['*.bib', 'mycmd://D:/'], 
				\ ['*.bib.j2', '.'],
				\ ]
<

*intro-myself*
head $(vim -Es -c '!echo $VIMRUNTIME' -c 'q')/syntax/cuda.vim
