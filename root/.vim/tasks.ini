# vim:commentstring=#\ %s:
# Internal Variables
# 可以在本地.tasks文件中定义[+]secion，替换全局配置中的变量
# See: https://github.com/skywind3000/asynctasks.vim?tab=readme-ov-file#internal-variables
[+]
make_target=
cc=gcc
cpp=g++
# -lm 链接数学库
cflag=
cppflag=-lstdc++
# https://www.luogu.com.cn/article/8v58g6p6
# https://github.com/google/sanitizers
# AddressSanitizer
#   https://github.com/google/sanitizers/wiki/AddressSanitizer
#   -fsanitize=address
# UndefinedBehaviorSanitizer
#   https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
#   -fsanitize=undefined
# MemorySanitizer:
#   https://github.com/google/sanitizers/wiki/MemorySanitizer
#   -fsanitize=memory -fPIE -pie
#
# NOTE:
#   '-fsanitize=address' not allowed with '-fsanitize=memory'
# <iostream> <set> may report error when using '-fsanitize=memory'
# cpp_sanitizers=-fsanitize=memory -fPIE -pie -fsanitize=undefined -fno-omit-frame-pointer
cpp_sanitizers=-fsanitize=address -fPIE -pie -fsanitize=undefined -fno-omit-frame-pointer

[file-build-san]
command:c=$(+cc) -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" $(+cpp_sanitizers) $(+cflag)
command:cpp=$(+cpp) -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" $(+cpp_sanitizers) $(+cppflag)
output=quickfix
cwd=$(VIM_FILEDIR)
save=2

[file-build-debug]
command:c=$(+cc) -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:cpp=$(+cpp) -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
# -G: Generate debug information for the GPU kernel code.
command:cuda=nvcc -O0 -g -G "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:rust=rustc -g "$(VIM_FILENAME)" -o "$(VIM_PATHNOEXT)"
command:typst=typst compile "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
save=2

[file-build-release]
command:c=$(+cc) -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:cpp=$(+cpp) -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:cuda=nvcc -O2 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:rust=rustc "$(VIM_FILENAME)" -o "$(VIM_PATHNOEXT)"
command:go=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:java=javac "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
command:typst=typst compile "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
save=2

[file-run-redir]
command="$(VIM_FILEPATH)" < $(-input-file:1.in)
command:c,cpp,rust="$(VIM_PATHNOEXT)" < $(-input-file:1.in)
command:go="$(VIM_PATHNOEXT)" < $(-input-file:1.in)
command:java=java "$(VIM_FILEPATH)" < $(-input-file:1.in)
command:python=python3 "$(VIM_FILENAME)" < $(-input-file:1.in)
command:javascript=node "$(VIM_FILENAME)" < $(-input-file:1.in)
command:sh=sh "$(VIM_FILENAME)" < $(-input-file:1.in)
command:lua=lua "$(VIM_FILENAME)" < $(-input-file:1.in)
command:perl=perl "$(VIM_FILENAME)" < $(-input-file:1.in)
command:ruby=ruby "$(VIM_FILENAME)" < $(-input-file:1.in)
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp,cuda,rust="$(VIM_PATHNOEXT)"
command:go=go run "$(VIM_FILENAME)"
command:java=java "$(VIM_FILEPATH)"
command:python=python3 "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:sql=$(+client:duckdb -f) "$(VIM_FILENAME)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[make]
command=make $(+make_target)
# set the working directory to the project root.
cwd=$(VIM_ROOT)
output=quickfix

[project-run]
command:c,cpp=make run
command:rust=cargo run
# <root> is an alias to `$(VIM_ROOT)`, a little easier to type.
cwd:c,cpp,rust=<root>
output=terminal

[ctags]
command:c,cpp=ctags -R --exclude=build --exclude=third_party --exclude=doc *

[cscope]
command:cpp=find . -name '*.cc' -or -name '*.h' > cscope.files && cscope -Rbq

[gtags]
command=gtags

[pytest]
command=python3 -m pytest -q --tb=no
output=terminal

[doctest]
command:python=python3 -m doctest -v "$(VIM_FILEPATH)"
output=terminal

[nvptx]
command=nvcc -ptx "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).ptx"

# TODO: cuda sass
